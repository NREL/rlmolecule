# Find the crystal structure with the maximum volume around the conducting ions

run_id: 'crystal_vol_example'

# Parameters for setting up the problem
problem_config:
    #actions_to_ignore: {'_1_1', '_1_2', '_1_3'}
    # we want at least 1 anion and 1 framework cation to try to get some more complex structures
    # so skip the actions without any framework cations 
    actions_to_ignore: {
        'K1Br1', 'K1Cl1', 'K1F1', 'K1I1', 'K2Br1I1', 'K2Cl1Br1', 'K2Cl1I1', 'K2F1Br1', 
        'K2F1Cl1', 'K2F1I1', 'K2O1', 'K2S1', 'K3Br1I2', 'K3Br1O1', 'K3Br1S1', 'K3Br2I1', 
        'K3Cl1Br2', 'K3Cl1I2', 'K3Cl1O1', 'K3Cl1S1', 'K3Cl2Br1', 'K3Cl2I1', 'K3F1Br2', 'K3F1Cl2', 
        'K3F1I2', 'K3F1O1', 'K3F1S1', 'K3F2Br1', 'K3F2Cl1', 'K3F2I1', 'K3I1O1', 'K3I1S1', 
        'K3N1', 'K3P1', 'K4Br1I3', 'K4Br1N1', 'K4Br2O1', 'K4Br2S1', 'K4Br3I1', 'K4Cl1Br3', 
        'K4Cl1I3', 'K4Cl1N1', 'K4Cl2O1', 'K4Cl2S1', 'K4Cl3Br1', 'K4Cl3I1', 'K4F1Br3', 'K4F1Cl3', 
        'K4F1I3', 'K4F1N1', 'K4F2O1', 'K4F2S1', 'K4F3Br1', 'K4F3Cl1', 'K4F3I1', 'K4I1N1', 
        'K4I2O1', 'K4I2S1', 'K4O1S1', 'K5Br1I4', 'K5Br1O2', 'K5Br1S2', 'K5Br2I3', 'K5Br2N1', 
        'K5Br3I2', 'K5Br3O1', 'K5Br3S1', 'K5Br4I1', 'K5Cl1Br4', 'K5Cl1I4', 'K5Cl1O2', 'K5Cl1S2', 
        'K5Cl2Br3', 'K5Cl2I3', 'K5Cl2N1', 'K5Cl3Br2', 'K5Cl3I2', 'K5Cl3O1', 'K5Cl3S1', 'K5Cl4Br1', 
        'K5Cl4I1', 'K5F1Br4', 'K5F1Cl4', 'K5F1I4', 'K5F1O2', 'K5F1S2', 'K5F2Br3', 'K5F2Cl3', 
        'K5F2I3', 'K5F2N1', 'K5F3Br2', 'K5F3Cl2', 'K5F3I2', 'K5F3O1', 'K5F3S1', 'K5F4Br1', 
        'K5F4Cl1', 'K5F4I1', 'K5I1O2', 'K5I1S2', 'K5I2N1', 'K5I3O1', 'K5I3S1', 'K5O1N1', 
        'K5S1N1', 'K6Br3N1', 'K6Cl3N1', 'K6F3N1', 'K6I3N1', 'K6O1S2', 'K6O2S1', 'K7Br1N2', 
        'K7Cl1N2', 'K7F1N2', 'K7I1N2', 'K7O2N1', 'K7S2N1', 'Li1Br1', 'Li1Cl1', 'Li1F1', 
        'Li1I1', 'Li2Br1I1', 'Li2Cl1Br1', 'Li2Cl1I1', 'Li2F1Br1', 'Li2F1Cl1', 'Li2F1I1', 'Li2O1', 
        'Li2S1', 'Li3Br1I2', 'Li3Br1O1', 'Li3Br1S1', 'Li3Br2I1', 'Li3Cl1Br2', 'Li3Cl1I2', 'Li3Cl1O1', 
        'Li3Cl1S1', 'Li3Cl2Br1', 'Li3Cl2I1', 'Li3F1Br2', 'Li3F1Cl2', 'Li3F1I2', 'Li3F1O1', 'Li3F1S1', 
        'Li3F2Br1', 'Li3F2Cl1', 'Li3F2I1', 'Li3I1O1', 'Li3I1S1', 'Li3N1', 'Li3P1', 'Li4Br1I3', 
        'Li4Br1N1', 'Li4Br2O1', 'Li4Br2S1', 'Li4Br3I1', 'Li4Cl1Br3', 'Li4Cl1I3', 'Li4Cl1N1', 'Li4Cl2O1', 
        'Li4Cl2S1', 'Li4Cl3Br1', 'Li4Cl3I1', 'Li4F1Br3', 'Li4F1Cl3', 'Li4F1I3', 'Li4F1N1', 'Li4F2O1', 
        'Li4F2S1', 'Li4F3Br1', 'Li4F3Cl1', 'Li4F3I1', 'Li4I1N1', 'Li4I2O1', 'Li4I2S1', 'Li4O1S1', 
        'Li5Br1I4', 'Li5Br1O2', 'Li5Br1S2', 'Li5Br2I3', 'Li5Br2N1', 'Li5Br3I2', 'Li5Br3O1', 'Li5Br3S1', 
        'Li5Br4I1', 'Li5Cl1Br4', 'Li5Cl1I4', 'Li5Cl1O2', 'Li5Cl1S2', 'Li5Cl2Br3', 'Li5Cl2I3', 'Li5Cl2N1', 
        'Li5Cl3Br2', 'Li5Cl3I2', 'Li5Cl3O1', 'Li5Cl3S1', 'Li5Cl4Br1', 'Li5Cl4I1', 'Li5F1Br4', 'Li5F1Cl4', 
        'Li5F1I4', 'Li5F1O2', 'Li5F1S2', 'Li5F2Br3', 'Li5F2Cl3', 'Li5F2I3', 'Li5F2N1', 'Li5F3Br2', 
        'Li5F3Cl2', 'Li5F3I2', 'Li5F3O1', 'Li5F3S1', 'Li5F4Br1', 'Li5F4Cl1', 'Li5F4I1', 'Li5I1O2', 
        'Li5I1S2', 'Li5I2N1', 'Li5I3O1', 'Li5I3S1', 'Li5O1N1', 'Li5S1N1', 'Li6Br3N1', 'Li6Cl3N1', 
        'Li6F3N1', 'Li6I3N1', 'Li6O1S2', 'Li6O2S1', 'Li7Br1N2', 'Li7Cl1N2', 'Li7F1N2', 'Li7I1N2', 
        'Li7O2N1', 'Li7S2N1', 'Mg1Br1I1', 'Mg1Br2', 'Mg1Cl1Br1', 'Mg1Cl1I1', 'Mg1Cl2', 'Mg1F1Br1', 
        'Mg1F1Cl1', 'Mg1F1I1', 'Mg1F2', 'Mg1I2', 'Mg1O1', 'Mg1S1', 'Mg2Br1I3', 'Mg2Br1N1', 
        'Mg2Br2O1', 'Mg2Br2S1', 'Mg2Br3I1', 'Mg2Cl1Br3', 'Mg2Cl1I3', 'Mg2Cl1N1', 'Mg2Cl2O1', 'Mg2Cl2S1', 
        'Mg2Cl3Br1', 'Mg2Cl3I1', 'Mg2F1Br3', 'Mg2F1Cl3', 'Mg2F1I3', 'Mg2F1N1', 'Mg2F2O1', 'Mg2F2S1', 
        'Mg2F3Br1', 'Mg2F3Cl1', 'Mg2F3I1', 'Mg2I1N1', 'Mg2I2O1', 'Mg2I2S1', 'Mg2O1S1', 'Mg3Br1I5', 
        'Mg3Br2I4', 'Mg3Br2O2', 'Mg3Br2S2', 'Mg3Br3N1', 'Mg3Br4I2', 'Mg3Br4O1', 'Mg3Br4S1', 'Mg3Br5I1', 
        'Mg3Cl1Br5', 'Mg3Cl1I5', 'Mg3Cl2Br4', 'Mg3Cl2I4', 'Mg3Cl2O2', 'Mg3Cl2S2', 'Mg3Cl3N1', 'Mg3Cl4Br2', 
        'Mg3Cl4I2', 'Mg3Cl4O1', 'Mg3Cl4S1', 'Mg3Cl5Br1', 'Mg3Cl5I1', 'Mg3F1Br5', 'Mg3F1Cl5', 'Mg3F1I5', 
        'Mg3F2Br4', 'Mg3F2Cl4', 'Mg3F2I4', 'Mg3F2O2', 'Mg3F2S2', 'Mg3F3N1', 'Mg3F4Br2', 'Mg3F4Cl2', 
        'Mg3F4I2', 'Mg3F4O1', 'Mg3F4S1', 'Mg3F5Br1', 'Mg3F5Cl1', 'Mg3F5I1', 'Mg3I2O2', 'Mg3I2S2', 
        'Mg3I3N1', 'Mg3I4O1', 'Mg3I4S1', 'Mg3N2', 'Mg3O1S2', 'Mg3O2S1', 'Mg3P2', 'Mg4Br2O3', 
        'Mg4Br2S3', 'Mg4Br5N1', 'Mg4Cl2O3', 'Mg4Cl2S3', 'Mg4Cl5N1', 'Mg4F2O3', 'Mg4F2S3', 'Mg4F5N1', 
        'Mg4I2O3', 'Mg4I2S3', 'Mg4I5N1', 'Mg4O1N2', 'Mg4O1S3', 'Mg4O3S1', 'Mg4S1N2', 'Mg5Br1N3', 
        'Mg5Cl1N3', 'Mg5F1N3', 'Mg5I1N3', 'Mg5O1S4', 'Mg5O2N2', 'Mg5O2S3', 'Mg5O3S2', 'Mg5O4S1', 
        'Mg5S2N2', 'Na1Br1', 'Na1Cl1', 'Na1F1', 'Na1I1', 'Na2Br1I1', 'Na2Cl1Br1', 'Na2Cl1I1', 
        'Na2F1Br1', 'Na2F1Cl1', 'Na2F1I1', 'Na2O1', 'Na2S1', 'Na3Br1I2', 'Na3Br1O1', 'Na3Br1S1', 
        'Na3Br2I1', 'Na3Cl1Br2', 'Na3Cl1I2', 'Na3Cl1O1', 'Na3Cl1S1', 'Na3Cl2Br1', 'Na3Cl2I1', 'Na3F1Br2', 
        'Na3F1Cl2', 'Na3F1I2', 'Na3F1O1', 'Na3F1S1', 'Na3F2Br1', 'Na3F2Cl1', 'Na3F2I1', 'Na3I1O1', 
        'Na3I1S1', 'Na3N1', 'Na3P1', 'Na4Br1I3', 'Na4Br1N1', 'Na4Br2O1', 'Na4Br2S1', 'Na4Br3I1', 
        'Na4Cl1Br3', 'Na4Cl1I3', 'Na4Cl1N1', 'Na4Cl2O1', 'Na4Cl2S1', 'Na4Cl3Br1', 'Na4Cl3I1', 'Na4F1Br3', 
        'Na4F1Cl3', 'Na4F1I3', 'Na4F1N1', 'Na4F2O1', 'Na4F2S1', 'Na4F3Br1', 'Na4F3Cl1', 'Na4F3I1', 
        'Na4I1N1', 'Na4I2O1', 'Na4I2S1', 'Na4O1S1', 'Na5Br1I4', 'Na5Br1O2', 'Na5Br1S2', 'Na5Br2I3', 
        'Na5Br2N1', 'Na5Br3I2', 'Na5Br3O1', 'Na5Br3S1', 'Na5Br4I1', 'Na5Cl1Br4', 'Na5Cl1I4', 'Na5Cl1O2', 
        'Na5Cl1S2', 'Na5Cl2Br3', 'Na5Cl2I3', 'Na5Cl2N1', 'Na5Cl3Br2', 'Na5Cl3I2', 'Na5Cl3O1', 'Na5Cl3S1', 
        'Na5Cl4Br1', 'Na5Cl4I1', 'Na5F1Br4', 'Na5F1Cl4', 'Na5F1I4', 'Na5F1O2', 'Na5F1S2', 'Na5F2Br3', 
        'Na5F2Cl3', 'Na5F2I3', 'Na5F2N1', 'Na5F3Br2', 'Na5F3Cl2', 'Na5F3I2', 'Na5F3O1', 'Na5F3S1', 
        'Na5F4Br1', 'Na5F4Cl1', 'Na5F4I1', 'Na5I1O2', 'Na5I1S2', 'Na5I2N1', 'Na5I3O1', 'Na5I3S1', 
        'Na5O1N1', 'Na5S1N1', 'Na6Br3N1', 'Na6Cl3N1', 'Na6F3N1', 'Na6I3N1', 'Na6O1S2', 'Na6O2S1', 
        'Na7Br1N2', 'Na7Cl1N2', 'Na7F1N2', 'Na7I1N2', 'Na7O2N1', 'Na7S2N1', 'Zn1Br2', 'Zn1Cl2',
        'Zn1F2', 'Zn1I2', 'Zn1O1', 'Zn1S1', 'Zn3N2', 'Zn3P2' }

# Parameters for training the policy model
train_config:
    # Reward options:
    # if the reward for a given game is > the previous 
    # *ranked_reward_alpha* fraction of games (e.g., 75% of games),
    # then it's a win. Otherwise, it's a loss.
    ranked_reward_alpha: 0.75
    # max/min number of games to consider 
    reward_buffer_max_size: 500
    reward_buffer_min_size: 10

    # Learning options:
    # some useful tips for selecting these parameter values:
    # https://stackoverflow.com/a/49924566/7483950
    # learning rate
    lr: 1E-3
    # number times that the learning algorithm will work through the entire training dataset
    epochs: 1E4
    # number of batch iterations before a training epoch is considered finished
    steps_per_epoch: 100
    # number of seconds to wait to check if enough games have been played
    game_count_delay: 20
    verbose: 2

    # AlphaZero problem options:
    # max/min number of games to consider (ordered by time) when training the policy
    max_buffer_size: 1000
    min_buffer_size: 15
    # number of training examples to use when updating model parameters
    batch_size: 32
    # folder in which to store the trained models
    policy_checkpoint_dir: '/projects/rlmolecule/$USER/crystal_vol/crystal_vol_example/policy_checkpoints'

    # CrystalTFAlphaZeroProblem options:
    ## size of network hidden layers
    #features: 8
    ## number of global state attention heads. Must be a factor of `features`
    #num_heads: 2
    ## number of message passing layers
    #num_messages: 1

# Parameters for running the Monte Carlo Tree Search games
mcts_config:
    # Minimum reward to return for invalid actions
    min_reward: 0
    pbc_c_base: 1.0
    pbc_c_init: 1.25
    # dirichlet 'shape' parameter. Larger values spread out probability over more moves.
    dirichlet_alpha: 1.0
    # percentage to favor dirichlet noise vs. prior estimation. Smaller means less noise
    dirichlet_x: 0.25
    # number of samples to perform at each level of the MCTS search
    num_mcts_samples: 100
    # the maximum search depth
    max_depth: 1000000
    #ucb_constant: math.sqrt(2)

# Database settings for the Object Relational Model (ORM)
# Used to store games and communicate between the policy model (run on GPUs) and rollout (run on CPUs)
sql_database:
   # settings to connect to NREL's yuma database
   drivername: "postgresql+psycopg2"
   dbname: "bde"
   port: "5432"
   host: "yuma.hpc.nrel.gov"
   user: "rlops"
   # read the password from a file
   passwd_file: '/projects/rlmolecule/rlops_pass'
